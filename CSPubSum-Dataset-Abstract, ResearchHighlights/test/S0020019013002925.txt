 The distributed synthesis problem of safety and reachability languages is known to be undecidable. In this article, we establish that this is the case for very simple languages, namely for safety and reachability specifications in the intersection of LTL and ACTL. Synthesis, also known as ChurchÃÂ¼s solvability problem , is the problem of defining a circuit that continually reacts on an infinite input stream by producing one output letter after receiving one input letter. ChurchÃÂ¼s solvability problem was first raised for specifications in S1S (monadic second order logic of one successor). It inspired the great works of BÃÂ¼chi and Landweber on finite games of infinite duration  and of Rabin on finite automata over infinite structures . Pnueli and Rosner extended the question to a setting, where the processes have access to incomplete information . They introduced architectures, where the communication from an external environment to working processes and the communication between working processes is through boolean variables. The same boolean variables serve as atomic propositions in the specification. Pnueli and Rosner have shown that the synthesis problem is undecidable for the architecture shown in   and hence in general, and Finkbeiner and Schewe  have identified the class of architectures, in which synthesis is decidable.

@highlight Distributed synthesis in the classical setting (synchronous, PnueliÃ¢ÂÂRosner) is undecidable for very weak languages.
@highlight The safety fragment of the intersection of LTL and ACTL is enough.
@highlight The reachability fragment of the intersection of LTL and ACTL is enough.
@highlight The set of architectures, for which synthesis is decidable, is not effected by these language restrictions.
