 As real-time systems increase in complexity to provide more and more functionality and perform more demanding computations, the problem of statically analyzing the Worst-Case Execution Time (WCET) bound of real-time programs is becoming more and more time-consuming and imprecise. The problem stems from the fact that with increasing program size, the number of potentially relevant program and hardware states that need to be considered during WCET analysis increases as well. However, only a relatively small portion of the program actually contributes to the final WCET bound. Large parts of the program are thus irrelevant and are analyzed in vain. In the best case this only leads to increased analysis time. Very often, however, the analysis of irrelevant program parts interferes with the analysis of those program parts that turn out to be relevant. We explore a novel technique based on graph pruning that promises to reduce the analysis overhead and, at the same time, increase the analysisâ€™ precision. The basic idea is to eliminate those program parts from the analysis problem that are known to be irrelevant for the final WCET bound. This reduces the analysis overhead, since only a subset of the program and hardware states have to be tracked. Consequently, more aggressive analysis techniques may be applied, effectively reducing the overestimation of the WCET. As a side-effect, interference from irrelevant program parts is eliminated, e.g., on addresses of memory accesses, on loop bounds, or on the cache or processor state. First experiments using a commercial WCET analysis tool show that our approach is feasible in practice and leads to reductions of up to 12% when a standard IPET approach is used for the analysis.

@highlight Recent work showed that often only small parts of real-time programs are relevant for their worst-case execution time (WCET).
@highlight Following this observation an iterative graph-pruning algorithm is proposed to refine WCET bounds derived by static analysis.
@highlight The precision of all WCET analysis phases is improved (analyses based on abstract interpretation and longest path search).
@highlight Evaluation using a commercial, state-of-the-art tool (aiT) using well-established real-time benchmarks (Debie, Papabench).
@highlight A proof-of-concept implementation shows considerable improvements (up to 12%) and even gains in analysis time.
