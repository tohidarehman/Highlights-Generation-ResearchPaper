 High performance computing has been used in various fields of astrophysical research. But most of it is implemented on massively parallel systems (supercomputers) or graphical processing unit clusters. With the advent of multicore processors in the last decade, many serial software codes have been re-implemented in parallel mode to utilize the full potential of these processors. In this paper, we propose parallel processing recipes for multicore machines for astronomical data processing. The target audience is astronomers who use Python as their preferred scripting language and who may be using PyRAF/IRAF for data processing. Three problems of varied complexity were benchmarked on three different types of multicore processors to demonstrate the benefits, in terms of execution time, of parallelizing data processing tasks. The native multiprocessing module available in Python makes it a relatively trivial task to implement the parallel code. We have also compared the three multiprocessing approachesâ€”Pool/Map, Process/Queue and Parallel Python. Our test codes are freely available and can be downloaded from our website.

@highlight We propose three recipes for parallelizing long running tasks on multicore machines.
@highlight Native Python multiprocessing module makes it trivial to write parallel code.
@highlight Parallel performance can be optimized by carefully load balancing the workload.
@highlight The cross-platform nature of Python makes the code portable on multiple platforms.
