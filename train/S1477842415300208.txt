 Recent advances in tooling and modern programming languages have progressively brought back the practice of developing domain-specific languages as a means to improve software development. Consequently, the problem of making composition between languages easier by emphasizing code reuse and componentized programming is a topic of increasing interest in research. In fact, it is not uncommon for different languages to share common features, and, because in the same project different DSLs may coexist to model concepts from different problem areas, it is interesting to study ways to develop modular, extensible languages. Earlier work has shown that traits can be used to modularize the semantics of a language implementation; a lot of attention is often spent on embedded DSLs; even when external DSLs are discussed, the main focus is on modularizing the semantics. In this paper we will show a complete trait-based approach to modularize not only the semantics but also the syntax of external DSLs, thereby simplifying extension and therefore evolution of a language implementation. We show the benefits of implementing these techniques using the Scala programming language.

@highlight The contribution of this work is to synthesize a collection of patterns and techniques that can be used to implement language components, using traits. Separate the syntactic concern from the construction of the abstract representation of the language. Separate the abstract representation of the language from the implementation of its semantics. Modularize the implementation of the semantics in distinct phases; decouple the abstract representation from the semantics of each phase, possibly expressing dependencies between phases. The benefit of representing language concepts through traits is an improved modularization, thereby simplifying code sharing across language implementations. Moreover, since traits in most languages can be written as separate code units, employing them in the modularization of a language make it possible to compile each language component separately and independently from the others, allowing them to be shared as binary assets, that, nevertheless, can be still combined together post-compilation. Scala×³s trait implementation has been used to demonstrate our contribution.
