 In the recent years, there is an intense competition between software development companies to design better interfaces. In this marketing rat race, Ribbon interface came to make software user interface easier. After the introduction of Ribbon by Microsoft, it was widely used by various software development companies. Ribbon is a replacement for menus and toolbars and it tends to organize tools in tabs based on their similarities. Although Ribbon interface has many advantages, previous researches have shown that there are serious usability issues that hinder usage of Ribbon interfaces for users with less computer literacy. In order to solve Ribbon interfaces usability issues, this study tried to introduce Ribbon interface design guidelines by focusing on the issues related to users with less computer literacy. In this study two separate sets of moderated (in-person) usability testing were used. The first set evaluated the usability issues of an experimental Ribbon interface software in terms of both visual and cognitive issues. The second set was used to evaluate the Ribbon interface prototype that was designed based on the discovered usability issues in the first usability test. In order to ensure the validity of the data, the researchers tried to triangulate the data collection process by collecting data from different sources, namely, quantitative measurement of participants' performance, direct observation, and interview. Based on the comparison of the usability tests results which points out the factors that have led to participants' performance improvement in the prototype version, a number of guidelines are extracted for Ribbon interfaces. These guidelines are applicable to Microsoft Office, Microsoft SharePoint and most of the software that can be developed with Ribbon interface. Putting these guidelines into action, self-learning would be promoted and learning issues of users with less computer literacy would be decreased.

@highlight Ribbon interface usability is evaluated on amateur users by pre-test and post-test.
@highlight Guidelines for optimizing Ribbon interface are presented.
@highlight Decreasing the number of core tabs and arranging tools based on usage are essential.
@highlight A common place for running different commands can decrease software complexity.
@highlight Put a simultaneous help in application button is the best method for guiding users.
